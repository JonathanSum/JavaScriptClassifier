{"version":3,"sources":["components/classes.js","components/ResultCard.js","components/OutputDetail.js","components/DisplayBox.js","components/UserSignal.js","components/DropBox.js","components/PredictResult.js","components/App.js","reportWebVitals.js","index.js","components/utils.js","Happy_Sugar_Life9v9_out10.onnx"],"names":["people_detail","people","useStyles","makeStyles","theme","card","width","maxHeight","overflow","item","paddingTop","avatar","spacing","height","inline","display","person_detail","paddingLeft","ResultCard","items","classes","Card","className","List","dense","map","name","percentage","id","ListItem","alignItems","ListItemAvatar","Avatar","variant","alt","src","ListItemText","primary","secondary","Fragment","Typography","component","color","OutputDetail","output","console","log","acts","k","topK","Array","from","act","i","sort","a","b","reverse","slice","denominator","y","Math","exp","reduce","person","prob","getTopK","getPerson","toFixed","getPersonImg","box","padding","margin","content","boxSizing","info","backgroundColor","palette","main","icon","fontSize","iconVariant","opacity","marginRight","message","DropMessageBar","Box","Alert","severity","LoadingBar","CircularProgress","size","UseStyles","UserSignal","fileLoaded","isDragActive","position","justifyContent","marginBottom","canvas","zIndex","input","DropBox","setFile","canvasRef","React","useState","openNW","setOpenNW","openTW","setOpenTW","onDrop","useCallback","acceptedFiles","length","file","type","startsWith","handleClose","useDropzone","getRootProps","getInputProps","ref","Dialog","open","aria-labelledby","onClose","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","autoFocus","session","makeSession","root","flexGrow","button","PredictResult","loaded","setLoaded","isLoading","setIsLoading","startLoadModel","loadModel","useRef","data","setData","useEffect","fetchImage","outputMap","setOutputMap","runModel","outputData","values","next","value","Grid","container","endIcon","marginTop","menuButton","title","heading","typography","pxToRem","fontWeight","fontWeightRegular","table","footer","App","AppBar","Toolbar","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","split","p","charAt","toUpperCase","join","toLowerCase","process","InferenceSession","backendHint","warmupModel","dims","warmupTensor","Tensor","Float32Array","random","run","resnet","preprocess","inputTensor","setTimeout","_runModel","dataTensor","ndarray","dataProcessedTensor","ops","assign","pick","divseq","wait","ms","Promise","res","rej","global","imgConfig","maxWidth","cover","crop","crossOrigin","orientation","getImage","url","loadImage","img","current","Error","ctx","getContext","drawImage","getImageData"],"mappings":"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","file":"static/js/main.ced7ef9d.chunk.js","sourcesContent":["export const people_detail = [\n \"Asahi Kōbe is a main character in Happy Sugar Life and Shio's big brother.\",\n \"She is Satō's Aunt and guardian of Satou.\",\n \"He is the teacher of Sato's school.\", \n \"He is Sato's co-worker.\",\n \"She is the main Character of Anime Happy Sugar life living with Shio.\",\n \"She is the main Character of Anime Happy Sugar life living with Sato..\",\n \"She is the good friend of Sato.\",\n \"She is the manager at the place where Sato works.\",\n \"She is Sato's co-worker.\",\n \"She is the mother of Shio.\",\n];\n\nexport const people = [\n    \"Asahi_Kobe\",\n    \"Sato's_Aunt\",\n    \"Kitaumekawa\", \n    \"Mitsuboshi\",\n    \"Sato_Matsuzaka\",\n    \"Shio_Kobe\",\n    \"Shoko_Hida\",\n    \"Manager\",\n    \"Sumire\",\n    \"Yuna\",\n   ];","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        width: 500,\n        // height: 1000,\n        maxHeight: 15000,\n        overflow: 'auto'\n    },\n    item: {\n        paddingTop: 10,\n    },\n    avatar: {\n        width: theme.spacing(25),\n        height: theme.spacing(25),\n    },\n    inline: {\n        display: 'inline',\n    },\n    person_detail: {\n        paddingLeft: 10,\n    }\n}));\n\n\n\nexport default function ResultCard({ items }) {\n    const classes = useStyles();\n    return <Card className={classes.card}><List dense>\n        {items.map(({ avatar, name, person_detail, percentage }) => {\n            const id = `${name}-${percentage}`\n            return <ListItem alignItems=\"flex-start\" key={id} className={classes.item}>\n                <ListItemAvatar>\n                    <Avatar\n                        className={classes.avatar}\n                        variant=\"square\"\n                        alt={`image of ${name}`}\n                        src={avatar}\n                    />\n                </ListItemAvatar>\n                <ListItemText\n                    id={id}\n                    primary={percentage + \"%\"}\n                    className={classes.person_detail}\n                    secondary={\n                        <React.Fragment>\n                            <Typography\n                                component=\"span\"\n                                variant=\"body2\"\n                                className={classes.inline}\n                                color=\"textPrimary\"\n                            >\n                                {name}\n                            </Typography>\n                            {\" — \" + person_detail}\n                        </React.Fragment>\n                    }\n                />\n            </ListItem>\n        })}\n    </List></Card>;\n};","import React from 'react';\nimport {people, people_detail} from './classes'\nimport ResultCard from './ResultCard';\nimport {getPersonImg, getPerson} from './utils';\n\nconst getTopK = (acts, k) => {\n    const topK = Array.from(acts)\n        .map((act, i) => [act, i])\n        .sort((a, b) => {\n            if (a[0] < b[0]) return -1;\n            if (a[0] > b[0]) return 1;\n            return 0;\n        })\n        .reverse()\n        .slice(0, k)\n\n\n    //softmax function        \n    const denominator = acts.map(y => Math.exp(y)).reduce((a,b) => a+b)\n    return topK.map(([act, i]) => ({\n        person: people[i],\n        act,\n        person_detail: people_detail[i],\n        prob: Math.exp(act) / denominator,\n    }));\n}\n\nexport default function OutputDetail({output}) {\n    if (!output) return null;\n    console.log(output)\n    const items = getTopK(output, 10).map(({person, person_detail, prob}) => ({\n        name: getPerson(person),\n        person_detail: person_detail,\n        percentage: (prob * 100).toFixed(2),\n        avatar: getPersonImg(person),\n    }));\n    return <ResultCard items={items} />;\n}","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles(theme => ({\n    box: {\n        width: 480,\n        padding: 0,\n        margin: 0,\n    },\n    content: {\n        boxSizing: 'border-box',\n    },\n    info: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\nexport function DropMessageBar({ message }) {\n    const classes = useStyles();\n    return <Box className={classes.box}>\n        <Alert severity=\"success\" className={classes.content}>\n            <span className={classes.message}>\n                {message}\n            </span></Alert>\n    </Box>;\n}\n\nexport function LoadingBar({ message }) {\n    const classes = useStyles();\n    return <Box className={classes.box}>\n        <Alert severity=\"info\" className={classes.content}>\n            <span className={classes.message}>\n                <CircularProgress size={20} className={classes.iconVariant} />\n                {message}\n            </span>\n        </Alert>\n    </Box>;\n}","import React from 'react';\nimport ImageSearchTwoToneIcon from '@material-ui/icons/ImageSearchTwoTone';\nimport SearchTwoToneIcon from '@material-ui/icons/SearchTwoTone';\n\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst UseStyles = makeStyles({\n    icon: {\n        width: '50%',\n        height: '50%',\n        color: 'grey',\n    },\n});\n\nconst UserSignal = ({fileLoaded, isDragActive}) => {\n        const classes = UseStyles();\n        if (fileLoaded) { return null; }\n        if (isDragActive) { return <ImageSearchTwoToneIcon className={classes.icon} />; }\n        return <SearchTwoToneIcon className={classes.icon} />;\n    }\nexport default UserSignal;","import React, { useCallback } from 'react';\nimport UserSignal from './UserSignal'\nimport { useDropzone } from 'react-dropzone';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles({\n    card: {\n        width: 480,\n        height: 480,\n        position: 'relative',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginBottom: 10,\n    },\n    canvas: {\n        width: 480,\n        height: 480,\n        zIndex: 0,\n        position: 'absolute',\n    },\n    input: {\n        zIndex: 9999,\n        position: 'absolute',\n    },\n});\n\nexport default function DropBox({ setFile, canvasRef, fileLoaded }) {\n    //alert for file num warning\n    const [openNW, setOpenNW] = React.useState(false);\n    //alert for file type warning\n    const [openTW, setOpenTW] = React.useState(false);\n\n\n    const classes = useStyles();\n    const onDrop = useCallback(acceptedFiles => {\n        if (acceptedFiles.length > 1) {\n            setOpenNW(true);\n            return console.log('It can only handle one file at a time');\n        }\n        if (acceptedFiles.length === 0) return;\n\n        const file = acceptedFiles[0]\n        if (!file.type.startsWith('image')) {\n            setOpenTW(true);\n            return console.log('file must be an image')\n\n        }\n        setFile(file)\n    }, [setFile])\n\n    const handleClose = () => {\n        setOpenNW(false);\n        setOpenTW(false);\n    };\n\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n    return (\n        <div>\n            <Card {...getRootProps()} className={classes.card}>\n                <canvas className={classes.canvas} ref={canvasRef} width={224} height={224} />\n                <input alt=\"Image Dropzone\" type=\"image\" className={classes.input}\n                    {...getInputProps()} />\n                <UserSignal fileLoaded={fileLoaded} isDragActive={isDragActive} />\n            </Card>\n\n            <Dialog\n                open={openNW}\n                aria-labelledby=\"alert-dialog-title\"\n                onClose={handleClose}\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"More than one file uploaded\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description_n\">\n                        It can only upload one file.\n                    </DialogContentText>\n                </DialogContent>\n\n            </Dialog>\n\n            <Dialog\n                open={openTW}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title_t\">{\"File Type Error\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        It is only image type file allowed.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\" autoFocus>\n                        Ok\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n}","import React, { useRef, useEffect, useState } from 'react';\nimport OutputDetail from './OutputDetail';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DropMessageBar, LoadingBar } from './DisplayBox'\nimport DropBox from './DropBox'\nimport { fetchImage, makeSession, loadModel, runModel } from './utils'\nimport Button from '@material-ui/core/Button';\nimport HourglassFullIcon from '@material-ui/icons/HourglassFull';\n\nconst session = makeSession();\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n}));\n\n\nexport default function PredictResult() {\n    const [loaded, setLoaded] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const startLoadModel = async () => {\n        if (isLoading || loaded) { return; }\n        setIsLoading(true);\n        await loadModel(session);\n        setLoaded(true);\n        setIsLoading(false);\n    }\n\n    const [file, setFile] = useState(null)\n    const canvas = useRef(null)\n    const [data, setData] = useState(null)\n\n    //Update when the file is loaded or the data is outputed\n    useEffect(() => {\n        if (file) fetchImage(file, canvas, setData);\n    }, [file])\n\n    const [outputMap, setOutputMap] = useState(null);\n\n    //Update when the model is loaded or the data is outputed\n    useEffect(() => {\n        if (!loaded || !data) return;\n        runModel(session, data, setOutputMap);\n    }, [loaded, data]);\n    const outputData = outputMap && outputMap.values().next().value.data;\n\n    const classes = useStyles();\n    return <div className={classes.root}>\n        <Grid container spacing={3}>\n            <Grid item>\n                <DropBox setFile={setFile} canvasRef={canvas} fileLoaded={!!file} />\n                {!loaded && !isLoading &&\n                    <Button\n                        variant=\"contained\"\n                        onClick={startLoadModel}\n                        color=\"primary\"\n                        className={classes.button}\n                        endIcon={<HourglassFullIcon>load model</HourglassFullIcon>}\n                    >load model</Button>\n                }\n                {!loaded && isLoading && <LoadingBar message=\"Loading model...\" />}\n                {loaded && data && !outputMap && <LoadingBar message=\"Running model...\" />}\n                {loaded && !file && <DropMessageBar message=\"Drop an image in above...\" />}\n                {!!file && !data && <LoadingBar message=\"Loading and Inputing image...\" />}\n            </Grid>\n            <Grid item>\n                <OutputDetail output={outputData} />\n            </Grid>\n        </Grid>\n    </div>\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport PredictResult from './PredictResult'\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    content: {\n        marginTop: 20,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightRegular,\n    },\n    table: {\n        width: '100%',\n    },\n    footer: {\n        padding: theme.spacing(2),\n        marginTop: 'auto',\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    return <div className={classes.root}>\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    Happy Sugar Life Character Classifier\n                </Typography>\n            </Toolbar>\n        </AppBar>\n        <Container className={classes.content}>\n            <PredictResult />\n        </Container>\n  </div>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n","import loadImage from 'blueimp-load-image';\nimport {Tensor, InferenceSession} from 'onnxjs';\nimport ndarray from 'ndarray';\nimport ops from 'ndarray-ops';\nimport resnet from '../Happy_Sugar_Life9v9_out10.onnx';\n\n//turning word1_word2 to be word 1 word 2.\nexport const getPerson = className => className.split('_').map(p => {\n    return p.charAt(0).toUpperCase() + p.slice(1)\n}).join(' ')\n\nexport const getPersonImg = className => {\n    const person = className.split('_').map(p => {\n        return p.charAt(0).toLowerCase() + p.slice(1).toLowerCase()\n    }).join('_')\n    return `${process.env.PUBLIC_URL}/images/${person}.jpg`\n}\n\nexport const makeSession = (() => {\n    let _session = null;\n    return () => {\n        if (_session !== null) { return _session; }\n        return new InferenceSession({backendHint: 'webgl'});\n    }\n})()\n\nasync function warmupModel (session) {\n    const dims = [1, 3, 224, 224];\n    const size = dims.reduce((a, b) => a * b);\n    const warmupTensor = new Tensor(new Float32Array(size), 'float32', dims);\n    for (let i = 0; i < size; i++) {\n        // random value [-1.0, 1.0)\n        warmupTensor.data[i] = Math.random() * 2.0 - 1.0; \n    }\n    await session.run([warmupTensor]);\n}\n\nexport async function loadModel (session) {\n    await session.loadModel(resnet);\n    await warmupModel(session);\n}\n\nasync function _runModel (session, input, setOutputMap) {\n    const {width, height} = input;\n    const data = preprocess(input);\n    const inputTensor = new Tensor(data, 'float32', [1, 3, width, height]);\n    // await wait(0);\n    const outputMap = await session.run([inputTensor]);\n    setOutputMap(outputMap);\n}\n\nexport function runModel(session, input, setOutputMap) {\n    setTimeout(() => _runModel(session, input, setOutputMap), 10);\n}\n\n\nconst preprocess = input => {\n    const {data, width, height} = input\n\n    // data processing\n    const dataTensor = ndarray(new Float32Array(data), [width, height, 4]);\n    const dataProcessedTensor = ndarray(new Float32Array(width * height * 3), [1, 3, width, height]);\n    ops.assign(dataProcessedTensor.pick(0, 0, null, null), dataTensor.pick(null, null, 0));\n    ops.assign(dataProcessedTensor.pick(0, 1, null, null), dataTensor.pick(null, null, 1));\n    ops.assign(dataProcessedTensor.pick(0, 2, null, null), dataTensor.pick(null, null, 2));\n    ops.divseq(dataProcessedTensor, 255);\n    // ops.subseq(dataProcessedTensor.pick(0, 0, null, null), 0.485);\n    // ops.subseq(dataProcessedTensor.pick(0, 1, null, null), 0.456);\n    // ops.subseq(dataProcessedTensor.pick(0, 2, null, null), 0.406);\n    // ops.divseq(dataProcessedTensor.pick(0, 0, null, null), 0.229);\n    // ops.divseq(dataProcessedTensor.pick(0, 1, null, null), 0.224);\n    // ops.divseq(dataProcessedTensor.pick(0, 2, null, null), 0.225);\n\n    return dataProcessedTensor.data;\n}\n\nconst wait = ms => new Promise((res, rej) => {\n    global.setTimeout(() => res(), ms)\n});\n\nconst imgConfig = {\n    maxWidth: 224,\n    maxHeight: 224,\n    cover: true,\n    crop: true,\n    canvas: true,\n    crossOrigin: 'Anonymous',\n    orientation: true,\n};\n  \nconst getImage = url => new Promise((res, rej) => {\n    loadImage(url, img => res(img), imgConfig)\n});\n\nexport const fetchImage = async (url, canvas, setData) => {\n    if (!canvas || !canvas.current) return;\n    const img = await getImage(url);\n    if (img.type === \"error\") throw new Error(\"could not load image\");\n    const ctx = canvas.current.getContext('2d');\n    ctx.drawImage(img, 0, 0);\n    await wait(1);\n    const data = ctx.getImageData(0, 0, canvas.current.width, canvas.current.height);\n    setData(data);\n};","export default __webpack_public_path__ + \"static/media/Happy_Sugar_Life9v9_out10.b71c9c34.onnx\";"],"sourceRoot":""}